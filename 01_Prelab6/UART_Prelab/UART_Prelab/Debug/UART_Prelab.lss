
UART_Prelab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000019c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bc  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fe  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000304  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  88:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
void setupUART(void);
void enviarchar(char Caracter);

//INTERRUPCIONES

ISR(USART_RX_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	received_rx = UDR0; //Recibo el dato en una variable que despliego en la salida apropiada
  9c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTB = (received_rx); //Output en B
  a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a8:	85 b9       	out	0x05, r24	; 5
}
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <setup>:
	//Entradas
	//No habrá digitales y UART tomará control sobre el PORTD regular
	
	//Salidas
	//PD0 salida por TX
	DDRD = 0;
  b6:	1a b8       	out	0x0a, r1	; 10
	DDRD |= (1<<DDD0);
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	8a b9       	out	0x0a, r24	; 10
	//Todo PORTB son salidas
	DDRB = 0;
  be:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3)|(1<<DDB4)|(1<<DDB5);
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	8f 63       	ori	r24, 0x3F	; 63
  c4:	84 b9       	out	0x04, r24	; 4
  c6:	08 95       	ret

000000c8 <setupUART>:
}

void setupUART(void){
	//RX y TX ya están configurados
	UCSR0A = 0; //No modificar, no necesita nada de este registro activado
  c8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 0;
  cc:	a1 ec       	ldi	r26, 0xC1	; 193
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	1c 92       	st	X, r1
	UCSR0C = 0;
  d2:	e2 ec       	ldi	r30, 0xC2	; 194
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	10 82       	st	Z, r1
	
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //Rx int. | Rxen | Txen
  d8:	8c 91       	ld	r24, X
  da:	88 69       	ori	r24, 0x98	; 152
  dc:	8c 93       	st	X, r24
	
	UCSR0C |= (1>>UCSZ01)|(1>>UCSZ00); //Async. | No parity | 1 stop | 8 data 
  de:	80 81       	ld	r24, Z
  e0:	80 83       	st	Z, r24
	
	UBRR0 = 103; //Baud 9600
  e2:	87 e6       	ldi	r24, 0x67	; 103
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ee:	08 95       	ret

000000f0 <enviarchar>:
}

void enviarchar(char Caracter){
	while (!(UCSR0A & (1<<UDRE0))); //Revisar si UDR está vacío
  f0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f4:	95 ff       	sbrs	r25, 5
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <enviarchar>
	UDR0 = Caracter; //Al estar vacío enviar el caracter en UDR
  f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fc:	08 95       	ret

000000fe <main>:
}

//PRINCIPAL
int main(void)
{
	cli();
  fe:	f8 94       	cli
	setup();
 100:	0e 94 5b 00 	call	0xb6	; 0xb6 <setup>
	setupUART();
 104:	0e 94 64 00 	call	0xc8	; 0xc8 <setupUART>
	sei();
 108:	78 94       	sei

	while (1)
	{
		enviarchar('H');
 10a:	88 e4       	ldi	r24, 0x48	; 72
 10c:	0e 94 78 00 	call	0xf0	; 0xf0 <enviarchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	83 ed       	ldi	r24, 0xD3	; 211
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x18>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x22>
 120:	00 00       	nop
 122:	f3 cf       	rjmp	.-26     	; 0x10a <main+0xc>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
