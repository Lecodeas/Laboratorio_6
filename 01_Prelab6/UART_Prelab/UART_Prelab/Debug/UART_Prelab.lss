
UART_Prelab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c2  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e0  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030a  00000000  00000000  0000111a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 93 00 	call	0x126	; 0x126 <main>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
void setupUART(void);
void enviarchar(char Caracter);

//INTERRUPCIONES

ISR(USART_RX_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	received_rx = UDR0; //Recibo el dato en una variable que despliego en las salidas apropiadas
  a0:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <received_rx>
	PORTD |= (received_rx<<2); //Shifted 2 para que no interrumpa Rx y Tx
  a8:	2b b1       	in	r18, 0x0b	; 11
  aa:	89 2f       	mov	r24, r25
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	82 2b       	or	r24, r18
  b8:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (received_rx>>6); //Shifted 6 para agarrar los últimos 2 valores 
  ba:	95 b1       	in	r25, 0x05	; 5
  bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <received_rx>
  c0:	82 95       	swap	r24
  c2:	86 95       	lsr	r24
  c4:	86 95       	lsr	r24
  c6:	83 70       	andi	r24, 0x03	; 3
  c8:	89 2b       	or	r24, r25
  ca:	85 b9       	out	0x05, r24	; 5
}
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <setup>:
	//Entradas
	//No habrá digitales y UART tomará control sobre el PORTD regular
	
	//Salidas
	//PD2 a PD7 son salidas (PD0 por TX)
	DDRD = 0;
  dc:	1a b8       	out	0x0a, r1	; 10
	DDRD |= (1<<DDD0)|(1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7);
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	8d 6f       	ori	r24, 0xFD	; 253
  e2:	8a b9       	out	0x0a, r24	; 10
	//PB0 a PB1 son salidas
	DDRB = 0;
  e4:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1<<DDB0)|(1<<DDB1);
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	84 b9       	out	0x04, r24	; 4
  ec:	08 95       	ret

000000ee <setupUART>:
}

void setupUART(void){
	//RX y TX ya están configurados
	UCSR0A = 0; //No modificar, no necesita nada de este registro activado
  ee:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 0;
  f2:	a1 ec       	ldi	r26, 0xC1	; 193
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	1c 92       	st	X, r1
	UCSR0C = 0;
  f8:	e2 ec       	ldi	r30, 0xC2	; 194
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	10 82       	st	Z, r1
	
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //Rx int. | Rxen | Txen
  fe:	8c 91       	ld	r24, X
 100:	88 69       	ori	r24, 0x98	; 152
 102:	8c 93       	st	X, r24
	
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ02); //Async. | No parity | 1 stop | 8 data 
 104:	80 81       	ld	r24, Z
 106:	84 60       	ori	r24, 0x04	; 4
 108:	80 83       	st	Z, r24
	
	UBRR0 = 103; //Baud 9600
 10a:	87 e6       	ldi	r24, 0x67	; 103
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 112:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 116:	08 95       	ret

00000118 <enviarchar>:
}

void enviarchar(char Caracter){
	while (!(UCSR0A & (1<<UDRE0))); //Revisar si UDR está vacío
 118:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 11c:	95 ff       	sbrs	r25, 5
 11e:	fc cf       	rjmp	.-8      	; 0x118 <enviarchar>
	UDR0 = Caracter; //Al estar vacío enviar el caracter en UDR
 120:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 124:	08 95       	ret

00000126 <main>:
}

//PRINCIPAL
int main(void)
{
	cli();
 126:	f8 94       	cli
	setup();
 128:	0e 94 6e 00 	call	0xdc	; 0xdc <setup>
	setupUART();
 12c:	0e 94 77 00 	call	0xee	; 0xee <setupUART>
	sei();
 130:	78 94       	sei

	while (1)
	{
		enviarchar(contador_char);
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	0e 94 8c 00 	call	0x118	; 0x118 <enviarchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	83 ed       	ldi	r24, 0xD3	; 211
 13e:	90 e3       	ldi	r25, 0x30	; 48
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x1a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x24>
 14a:	00 00       	nop
 14c:	f2 cf       	rjmp	.-28     	; 0x132 <main+0xc>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
