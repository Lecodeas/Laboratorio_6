
UART_Lab_Postlab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000016e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000784  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ce  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dc  00000000  00000000  0000111a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c8  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cd  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001921  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:

// OTRAS FUNCIONES
void setup(void){
	//Entradas y Salidas
	//Rx como entrada
	DDRD = 0;
  a6:	1a b8       	out	0x0a, r1	; 10
	DDRD &= ~(1<<DDD0);
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	8a b9       	out	0x0a, r24	; 10
	
	//PORTB Como Salida
	DDRB = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	84 b9       	out	0x04, r24	; 4
	//Tx salida
	DDRD |= (1<<DDD1);
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	8a b9       	out	0x0a, r24	; 10
	//PC0 Y 1 como Salida
	DDRC = 0;
  b8:	17 b8       	out	0x07, r1	; 7
	DDRC |= (1<<DDC0)|(1<<DDC1);
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	87 b9       	out	0x07, r24	; 7
  c0:	08 95       	ret

000000c2 <setupUART>:
}

void setupUART(void){		
	//No necesito nada de este registro
	UCSR0A = 0;
  c2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Rx int. | Tx En. | Rx en.  
	UCSR0B = 0;
  c6:	e1 ec       	ldi	r30, 0xC1	; 193
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  cc:	80 81       	ld	r24, Z
  ce:	88 69       	ori	r24, 0x98	; 152
  d0:	80 83       	st	Z, r24
	
	//Async | No Pariety | 1 stop | 8 data
	UCSR0C = 0;
  d2:	e2 ec       	ldi	r30, 0xC2	; 194
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  d8:	80 81       	ld	r24, Z
  da:	86 60       	ori	r24, 0x06	; 6
  dc:	80 83       	st	Z, r24
	
	//UDR0 9600
	UBRR0 = 103;
  de:	87 e6       	ldi	r24, 0x67	; 103
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ea:	08 95       	ret

000000ec <enviarChar>:
	
}

void enviarChar(char Caracter){
	while (!(UCSR0A & (1<<UDRE0))); //Hasta que esté vacío puedo enviar el dato
  ec:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f0:	95 ff       	sbrs	r25, 5
  f2:	fc cf       	rjmp	.-8      	; 0xec <enviarChar>
	UDR0 = Caracter;
  f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f8:	08 95       	ret

000000fa <enviarString>:
}

void enviarString(char* Texto){
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	8c 01       	movw	r16, r24
	uint8_t i; //Contador para array de texto
	for(i = 0; Texto[i] != '\0'; i++){
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	03 c0       	rjmp	.+6      	; 0x10c <enviarString+0x12>
		//Mientras el caracter no sea nulo, se envía
		enviarChar(Texto[i]);
 106:	0e 94 76 00 	call	0xec	; 0xec <enviarChar>
	UDR0 = Caracter;
}

void enviarString(char* Texto){
	uint8_t i; //Contador para array de texto
	for(i = 0; Texto[i] != '\0'; i++){
 10a:	cf 5f       	subi	r28, 0xFF	; 255
 10c:	f8 01       	movw	r30, r16
 10e:	ec 0f       	add	r30, r28
 110:	f1 1d       	adc	r31, r1
 112:	80 81       	ld	r24, Z
 114:	81 11       	cpse	r24, r1
 116:	f7 cf       	rjmp	.-18     	; 0x106 <enviarString+0xc>
		//Mientras el caracter no sea nulo, se envía
		enviarChar(Texto[i]);
	}
}
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <main>:
void enviarString(char* Texto);

//PRINCIPAL
int main(void)
{
	cli();
 120:	f8 94       	cli
	setup();
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
    setupUART();
 126:	0e 94 61 00 	call	0xc2	; 0xc2 <setupUART>
	sei();
 12a:	78 94       	sei
	
	enviarString("Hola Mundo!@");
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 7d 00 	call	0xfa	; 0xfa <enviarString>
 134:	ff cf       	rjmp	.-2      	; 0x134 <main+0x14>

00000136 <__vector_18>:
	}
}

//INTERRUPCIONES

ISR(USART_RX_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
	rx_leido = UDR0; //Temporal para el leído
 142:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 146:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	PORTB = rx_leido; //Primeros 6 bits
 14a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 14e:	85 b9       	out	0x05, r24	; 5
	PORTC = (rx_leido>>6); //Shifteado para los últimos 2 bits
 150:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 154:	82 95       	swap	r24
 156:	86 95       	lsr	r24
 158:	86 95       	lsr	r24
 15a:	83 70       	andi	r24, 0x03	; 3
 15c:	88 b9       	out	0x08, r24	; 8
}
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
